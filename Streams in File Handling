Streams in File Handling
A stream is a way to transfer or process data continuously, often one piece at a time, instead of handling everything at once. Streams are commonly used in programming to read or write files, process data from networks, or handle input/output operations. There are two types of streams:
•	Input Stream: Reads data from a source into a program.
•	Output Stream: Writes data from a program to a destination
using System;
using System.IO;
class Program
{
    static void Main()
    {
        // Writing using StreamWriter
        using (StreamWriter writer = new StreamWriter("data.txt"))
        {
            writer.WriteLine("Name: Lakshmi");
            writer.WriteLine("Course: BCA");
        }
        // Reading using StreamReader
        using (StreamReader reader = new StreamReader("data.txt"))
        {
            string line;
            while ((line = reader.ReadLine()) != null)
            {
                Console.WriteLine("File " + line);
            }
        }
    }
}

Some of the methods used in the StreamWriter Class in C#
 

using System;
using System.IO;
using System.Threading.Tasks;
class Program
{
    static async Task Main()
    {
        // Create a StreamWriter to write to a file
        using (StreamWriter writer = new StreamWriter("example.txt"))
        {
            writer.Write("Hello");           // Writes without newline
            writer.WriteLine(" World!");     // Writes with newline
            writer.Flush();                  // Ensures data is written immediately
            await writer.WriteAsync("Async write ");      // Asynchronous write
            await writer.WriteLineAsync("with newline");  // Asynchronous write with newline
        }  // Dispose() and Close() are called automatically here
    }
}

Some of the methods used in StreamReader Class in C#
 
using System;
using System.IO;
class Program
{
    static void Main()
    {
        File.WriteAllText("sample.txt", "Line1\nLine2\nLine3");
        using (StreamReader reader = new StreamReader("sample.txt"))
        {
            Console.WriteLine(reader.ReadLine());   // Reads: Line1
            Console.WriteLine(reader.Peek());       // ASCII of 'L' in Line2 → 76
            Console.WriteLine(reader.ReadLine());   // Reads: Line2
       reader.BaseStream.Seek(0, SeekOrigin.Begin); // Move pointer back to start
      reader.DiscardBufferedData();                // Refresh buffer
     Console.WriteLine(reader.ReadLine());   // Reads again from beginning → Line1
Console.WriteLine(reader.ReadToEnd());  // Reads remaining → Line2 + Line3
        }
    }
}

using System;
using System.IO;
class Program
{
    static void Main()
    {
        File.WriteAllText("seek.txt", "HelloWorld");
        using (FileStream fs = new FileStream("something.txt", FileMode.Open))
        {
            fs.Seek(5, SeekOrigin.Begin); // Move pointer to 6th character (index 5)
            int ch = fs.ReadByte();       // Read one byte from that position
            Console.WriteLine((char)ch);  // Output: W
        }
    }
}

Serialization: 
Serialization means converting an object to a file format so it can be saved to a file or sent over a network.
Types 
•	Binary Serialization
•	XML Serialization
•	JSON Serialization 

Deserialization:
It is the process of getting back the serialized object so that it can be loaded into memory.
















Ex: 
using System;
using System.IO;
using System.Runtime.Serialization.Formatters.Binary;
[Serializable]  
class Student
{	
    public string Name;
    public int Age;
}
class Program
{
    static void Main()
    {
        Student s = new Student() { Name = "Ravi", Age = 20 };
        // Serialize object to file
        FileStream fs = new FileStream("student.dat", FileMode.Create);
        BinaryFormatter bf = new BinaryFormatter();
        bf.Serialize(fs, s);
        fs.Close();
        Console.WriteLine(" Object serialized to file.");

        // Deserialize from file to object
        FileStream fs2 = new FileStream("student.dat", FileMode.Open);
        Student deserializedStudent = (Student)bf.Deserialize(fs2);
        fs2.Close();
        Console.WriteLine(" Name: " + deserializedStudent.Name);
        Console.WriteLine(" Age: " + deserializedStudent.Age);
    }
}
